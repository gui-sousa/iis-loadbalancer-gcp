{
  "version": 4,
  "terraform_version": "0.15.5",
  "serial": 4794,
  "lineage": "d63c0c34-dd54-27f8-993f-5fe43025d43a",
  "outputs": {
    "IP_AD": {
      "value": "35.247.221.53",
      "type": "string"
    },
    "IP_IIS": {
      "value": "35.247.225.182",
      "type": "string"
    },
    "IP_SQL1": {
      "value": "34.95.241.200",
      "type": "string"
    },
    "IP_SQL2": {
      "value": "35.198.55.138",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "template_file",
      "name": "host-ansible",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "1de5fb572576be4425da03fd6e692d474d89b946108b1cd58d5bdf8c19e5bc9f",
            "rendered": "[ad]\n35.247.221.53\n\n[ad:vars]\nansible_user=user\nansible_password=\"P@ssw0rd\"\nansible_port=5986\nansible_connection=winrm\n; ansible_winrm_operation_timeout_sec=60\n; ansible_winrm_read_timeout_sec=70\n; ansible_winrm_scheme=http\nansible_winrm_transport=basic\nansible_winrm_server_cert_validation=ignore\nansible_winrm_kerberos_delegation=true\n\n[iis]\n35.247.225.182\n\n[iis:vars]\nansible_user=user\nansible_password=\"P@ssw0rd\"\nansible_port=5986\nansible_connection=winrm\n; ansible_winrm_operation_timeout_sec=60\n; ansible_winrm_read_timeout_sec=70\n; ansible_winrm_scheme=http\nansible_winrm_transport=basic\nansible_winrm_server_cert_validation=ignore\nansible_winrm_kerberos_delegation=true\n\n[sql1]\n34.95.241.200\n\n[sql1:vars]\nansible_user=user\nansible_password=\"P@ssw0rd\"\nansible_port=5986\nansible_connection=winrm\n; ansible_winrm_operation_timeout_sec=60\n; ansible_winrm_read_timeout_sec=70\n; ansible_winrm_scheme=http\nansible_winrm_transport=basic\nansible_winrm_server_cert_validation=ignore\nansible_winrm_kerberos_delegation=true\n\n[sql2]\n35.198.55.138\n\n[sql2:vars]\nansible_user=user\nansible_password=\"P@ssw0rd\"\nansible_port=5986\nansible_connection=winrm\n; ansible_winrm_operation_timeout_sec=60\n; ansible_winrm_read_timeout_sec=70\n; ansible_winrm_scheme=http\nansible_winrm_transport=basic\nansible_winrm_server_cert_validation=ignore\nansible_winrm_kerberos_delegation=true",
            "template": "[ad]\n${ip_instancia_ad}\n\n[ad:vars]\nansible_user=user\nansible_password=\"P@ssw0rd\"\nansible_port=5986\nansible_connection=winrm\n; ansible_winrm_operation_timeout_sec=60\n; ansible_winrm_read_timeout_sec=70\n; ansible_winrm_scheme=http\nansible_winrm_transport=basic\nansible_winrm_server_cert_validation=ignore\nansible_winrm_kerberos_delegation=true\n\n[iis]\n${ip_instancia_iis}\n\n[iis:vars]\nansible_user=user\nansible_password=\"P@ssw0rd\"\nansible_port=5986\nansible_connection=winrm\n; ansible_winrm_operation_timeout_sec=60\n; ansible_winrm_read_timeout_sec=70\n; ansible_winrm_scheme=http\nansible_winrm_transport=basic\nansible_winrm_server_cert_validation=ignore\nansible_winrm_kerberos_delegation=true\n\n[sql1]\n${ip_instancia_sql1}\n\n[sql1:vars]\nansible_user=user\nansible_password=\"P@ssw0rd\"\nansible_port=5986\nansible_connection=winrm\n; ansible_winrm_operation_timeout_sec=60\n; ansible_winrm_read_timeout_sec=70\n; ansible_winrm_scheme=http\nansible_winrm_transport=basic\nansible_winrm_server_cert_validation=ignore\nansible_winrm_kerberos_delegation=true\n\n[sql2]\n${ip_instancia_sql2}\n\n[sql2:vars]\nansible_user=user\nansible_password=\"P@ssw0rd\"\nansible_port=5986\nansible_connection=winrm\n; ansible_winrm_operation_timeout_sec=60\n; ansible_winrm_read_timeout_sec=70\n; ansible_winrm_scheme=http\nansible_winrm_transport=basic\nansible_winrm_server_cert_validation=ignore\nansible_winrm_kerberos_delegation=true",
            "vars": {
              "ip_instancia_ad": "35.247.221.53",
              "ip_instancia_iis": "35.247.225.182",
              "ip_instancia_sql1": "34.95.241.200",
              "ip_instancia_sql2": "35.198.55.138"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "playbook-ad",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "9b6d7aeb7bd47285bad2dd5f7cd5772847d13d1b4cded32381903e0dc0f41ae1",
            "rendered": "---\n- name: Cria Ambiente Active Directory com Dominio\n  hosts: ad\n  vars:\n    temp_address: 35.247.221.53\n    dc_address: 35.247.221.53\n    dc_netmask_cidr: 24\n    dc_gateway: 35.247.221.53\n    dc_hostname: 'bookshelf-ad'\n    domain_name: \"example-gcp.local\"\n    local_admin: '.\\administrator'\n    temp_password: 'P@ssw0rd'\n    dc_password: 'P@ssw0rd'\n    recovery_password: 'P@ssw0rd'\n    upstream_dns_1: 8.8.8.8\n    upstream_dns_2: 8.8.4.4\n    reverse_dns_zone: \"172.16.108.0/24\"\n    ntp_servers: \"0.us.pool.ntp.org,1.us.pool.ntp.org,2.us.pool.ntp.org,3.us.pool.ntp.org\"\n  gather_facts: no\n  \n  tasks:\n  - name: Aguardando Instancia ficar disponivel\n    wait_for_connection:\n      timeout: 900\n    delegate_to: '{{ dc_address }}'\n\n  - name: Config IP Estatico\n    win_shell: \"(new-netipaddress -InterfaceAlias Ethernet0 -IPAddress {{ dc_address }} -prefixlength {{dc_netmask_cidr}} -defaultgateway {{ dc_gateway }})\"\n    delegate_to: '{{ temp_address }}'  \n    ignore_errors: True \n\n  - name: Config Senha Admin\n    win_user:\n      name: administrator\n      password: \"{{dc_password}}\"\n      state: present\n    delegate_to: '{{ dc_address }}'\n    ignore_errors: True  \n \n  - name: Aguardando o WinRM ficar disponivel na instancia \n    wait_for_connection:\n      timeout: 900\n    delegate_to: '{{ dc_address }}'\n\n  - name: Config DNS\n    win_dns_client:\n      adapter_names: '*'\n      ipv4_addresses:\n      - '{{ upstream_dns_1 }}'\n      - '{{ upstream_dns_2 }}'\n    delegate_to: '{{ dc_address }}'\n\n  - name: Parando time service\n    win_service:\n      name: w32time\n      state: stopped\n    delegate_to: '{{ dc_address }}'\n\n  - name: Config NTP Servers\n    win_shell: 'w32tm /config /syncfromflags:manual /manualpeerlist:\"{{ntp_servers}}\"'\n    delegate_to: '{{ dc_address }}'\n\n  - name: Inicia time service\n    win_service:\n      name: w32time\n      state: started  \n    delegate_to: '{{ dc_address }}'\n\n  - name: Desativando firewall da instancia\n    win_firewall:\n      state: disabled\n      profiles:\n      - Domain\n      - Private\n      - Public\n    tags: disable_firewall\n    delegate_to: '{{ dc_address }}'\n\n  - name: Mudando o hostname da Instancia \n    win_hostname:\n      name: '{{ dc_hostname }}'\n    register: res\n    delegate_to: '{{ dc_address }}'\n\n  - name: Reiniciando Instancia\n    win_reboot:\n    when: res.reboot_required   \n    delegate_to: '{{ dc_address }}'\n\n  - name: Instalando Active Directory\n    win_feature: \u003e\n         name=AD-Domain-Services\n         include_management_tools=yes\n         include_sub_features=yes\n         state=present\n    register: result\n    delegate_to: '{{ dc_address }}'\n\n  - name: Criando Dominio\n    win_domain: \u003e\n       dns_domain_name='{{ domain_name }}'\n       safe_mode_password='{{ recovery_password }}'\n    register: ad\n    delegate_to: \"{{ dc_address }}\"\n\n  - name: Reiniciando Instancia\n    win_reboot:\n     msg: \"Installing AD. Rebooting...\"\n     pre_reboot_delay: 100\n    when: ad.changed\n    delegate_to: \"{{ dc_address }}\"\n\n  - name: Config DNS interno\n    win_dns_client:\n      adapter_names: '*'\n      ipv4_addresses:\n      - '127.0.0.1'\n    delegate_to: '{{ dc_address }}'\n\n  - name: Criando Zona de DNS Reversa\n    win_shell: \"Add-DnsServerPrimaryZone -NetworkID {{reverse_dns_zone}} -ReplicationScope Forest\"\n    delegate_to: \"{{ dc_address }}\"    \n    retries: 30\n    delay: 60\n    register: result           \n    until: result is succeeded\n\n  - name: Cria User\n    win_domain_user:\n      name: \"{{item.nome}}\"\n      password: P@ssw0rd\n      state: present\n      groups:\n       - \"{{item.grupo}}\"\n    loop:\n    - { nome: 'spirogiro', grupo: 'Domain Admins' }\n    - { nome: 'spyrojaira', grupo: 'Domain Admins' }\n    - { nome: 'sql.service', grupo: 'Domain Users' }\n    - { nome: 'teste2', grupo: 'Domain Users' }",
            "template": "---\n- name: Cria Ambiente Active Directory com Dominio\n  hosts: ad\n  vars:\n    temp_address: ${ip_instancia_ad}\n    dc_address: ${ip_instancia_ad}\n    dc_netmask_cidr: 24\n    dc_gateway: ${ip_instancia_ad}\n    dc_hostname: 'bookshelf-ad'\n    domain_name: \"example-gcp.local\"\n    local_admin: '.\\administrator'\n    temp_password: 'P@ssw0rd'\n    dc_password: 'P@ssw0rd'\n    recovery_password: 'P@ssw0rd'\n    upstream_dns_1: 8.8.8.8\n    upstream_dns_2: 8.8.4.4\n    reverse_dns_zone: \"172.16.108.0/24\"\n    ntp_servers: \"0.us.pool.ntp.org,1.us.pool.ntp.org,2.us.pool.ntp.org,3.us.pool.ntp.org\"\n  gather_facts: no\n  \n  tasks:\n  - name: Aguardando Instancia ficar disponivel\n    wait_for_connection:\n      timeout: 900\n    delegate_to: '{{ dc_address }}'\n\n  - name: Config IP Estatico\n    win_shell: \"(new-netipaddress -InterfaceAlias Ethernet0 -IPAddress {{ dc_address }} -prefixlength {{dc_netmask_cidr}} -defaultgateway {{ dc_gateway }})\"\n    delegate_to: '{{ temp_address }}'  \n    ignore_errors: True \n\n  - name: Config Senha Admin\n    win_user:\n      name: administrator\n      password: \"{{dc_password}}\"\n      state: present\n    delegate_to: '{{ dc_address }}'\n    ignore_errors: True  \n \n  - name: Aguardando o WinRM ficar disponivel na instancia \n    wait_for_connection:\n      timeout: 900\n    delegate_to: '{{ dc_address }}'\n\n  - name: Config DNS\n    win_dns_client:\n      adapter_names: '*'\n      ipv4_addresses:\n      - '{{ upstream_dns_1 }}'\n      - '{{ upstream_dns_2 }}'\n    delegate_to: '{{ dc_address }}'\n\n  - name: Parando time service\n    win_service:\n      name: w32time\n      state: stopped\n    delegate_to: '{{ dc_address }}'\n\n  - name: Config NTP Servers\n    win_shell: 'w32tm /config /syncfromflags:manual /manualpeerlist:\"{{ntp_servers}}\"'\n    delegate_to: '{{ dc_address }}'\n\n  - name: Inicia time service\n    win_service:\n      name: w32time\n      state: started  \n    delegate_to: '{{ dc_address }}'\n\n  - name: Desativando firewall da instancia\n    win_firewall:\n      state: disabled\n      profiles:\n      - Domain\n      - Private\n      - Public\n    tags: disable_firewall\n    delegate_to: '{{ dc_address }}'\n\n  - name: Mudando o hostname da Instancia \n    win_hostname:\n      name: '{{ dc_hostname }}'\n    register: res\n    delegate_to: '{{ dc_address }}'\n\n  - name: Reiniciando Instancia\n    win_reboot:\n    when: res.reboot_required   \n    delegate_to: '{{ dc_address }}'\n\n  - name: Instalando Active Directory\n    win_feature: \u003e\n         name=AD-Domain-Services\n         include_management_tools=yes\n         include_sub_features=yes\n         state=present\n    register: result\n    delegate_to: '{{ dc_address }}'\n\n  - name: Criando Dominio\n    win_domain: \u003e\n       dns_domain_name='{{ domain_name }}'\n       safe_mode_password='{{ recovery_password }}'\n    register: ad\n    delegate_to: \"{{ dc_address }}\"\n\n  - name: Reiniciando Instancia\n    win_reboot:\n     msg: \"Installing AD. Rebooting...\"\n     pre_reboot_delay: 100\n    when: ad.changed\n    delegate_to: \"{{ dc_address }}\"\n\n  - name: Config DNS interno\n    win_dns_client:\n      adapter_names: '*'\n      ipv4_addresses:\n      - '127.0.0.1'\n    delegate_to: '{{ dc_address }}'\n\n  - name: Criando Zona de DNS Reversa\n    win_shell: \"Add-DnsServerPrimaryZone -NetworkID {{reverse_dns_zone}} -ReplicationScope Forest\"\n    delegate_to: \"{{ dc_address }}\"    \n    retries: 30\n    delay: 60\n    register: result           \n    until: result is succeeded\n\n  - name: Cria User\n    win_domain_user:\n      name: \"{{item.nome}}\"\n      password: P@ssw0rd\n      state: present\n      groups:\n       - \"{{item.grupo}}\"\n    loop:\n    - { nome: 'spirogiro', grupo: 'Domain Admins' }\n    - { nome: 'spyrojaira', grupo: 'Domain Admins' }\n    - { nome: 'sql.service', grupo: 'Domain Users' }\n    - { nome: 'teste2', grupo: 'Domain Users' }",
            "vars": {
              "ip_instancia_ad": "35.247.221.53",
              "ip_instancia_interno_ad": "10.1.0.100"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "playbook-iis",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "b82256a89d804cd69a6d859323ce2ed832b4c0cd15241e2c9ca68674570064d3",
            "rendered": "---\n- name: Configura Ambiente IIS\n  hosts: iis\n  tasks:\n    - name: \"Alterando hostname e reiniciando\"\n      win_hostname:\n        name: bookshelf-iis\n      register: iis\n    - win_reboot:\n      when: iis.reboot_required \n\n    - name: \"Colocando DNS do dominio na instancia\"\n      ansible.windows.win_dns_client:\n        adapter_names: Ethernet\n        dns_servers: 10.1.0.100\n\n    - name: \"Adicionando IIS ao dominio\"\n      win_domain_membership:\n        dns_domain_name: example-gcp.local\n        domain_admin_user: spirogiro@example-gcp.local\n        domain_admin_password: P@ssw0rd\n        state: domain\n      register: domain_state\n    - win_reboot:\n        pre_reboot_delay: 100\n      when: domain_state.reboot_required\n \n \n\n",
            "template": "---\n- name: Configura Ambiente IIS\n  hosts: iis\n  tasks:\n    - name: \"Alterando hostname e reiniciando\"\n      win_hostname:\n        name: bookshelf-iis\n      register: iis\n    - win_reboot:\n      when: iis.reboot_required \n\n    - name: \"Colocando DNS do dominio na instancia\"\n      ansible.windows.win_dns_client:\n        adapter_names: Ethernet\n        dns_servers: ${ip_instancia_interno_ad}\n\n    - name: \"Adicionando IIS ao dominio\"\n      win_domain_membership:\n        dns_domain_name: example-gcp.local\n        domain_admin_user: spirogiro@example-gcp.local\n        domain_admin_password: P@ssw0rd\n        state: domain\n      register: domain_state\n    - win_reboot:\n        pre_reboot_delay: 100\n      when: domain_state.reboot_required\n \n \n\n",
            "vars": {
              "ip_instancia_iis": "35.247.225.182",
              "ip_instancia_interno_ad": "10.1.0.100"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "playbook-sql",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "be9ae0752ee4b259b77bfdec3c2eed9fb6cb5603fa7dc87d0e0b6814b6e3452b",
            "rendered": "---\n- name: Configuração SQL1\n  hosts: sql1\n  tasks:\n    - name: \"Alterando hostname e reiniciando\"\n      win_hostname:\n        name: bookshelf-sql1\n      register: iis\n    - win_reboot:\n      when: iis.reboot_required \n\n- name: Configuração SQL2\n  hosts: sql2\n  tasks:\n    - name: \"Alterando hostname e reiniciando\"\n      win_hostname:\n        name: bookshelf-sql2\n      register: iis\n    - win_reboot:\n      when: iis.reboot_required\n    \n    - name: Cria pasta para backups de banco de dados e compartilha\n      ansible.windows.win_powershell:\n        script: |\n          New-Item -ItemType directory -Path C:\\SQLBackup\n          New-SMBShare -Name SQLBackup -Path C:\\SQLBackup -FullAccess \"Authenticated Users\"\n\n- name: Configuraçao Rede e instalações\n  hosts: sql1:sql2\n  tasks:\n    - name: \"Colocando DNS do dominio na instancia\"\n      ansible.windows.win_dns_client:\n        adapter_names: Ethernet\n        dns_servers: 10.1.0.100\n\n    - name: Adiciona regras de firewall do Windows\n      ansible.windows.win_powershell:\n        script: |\n          netsh firewall set service remoteadmin\n          netsh advfirewall firewall add rule name=\"5022 for Avail Groups\" dir=in action=allow protocol=TCP localport=5022\n          netsh advfirewall firewall add rule name=\"1433 for SQL Server\" dir=in action=allow protocol=TCP localport=1433\n\n    - name: Instala o recurso de cluster de failover\n      win_feature: \n       name: \"Failover-Clustering\"\n       state: present\n       include_sub_features: true\n       include_management_tools: true\n\n    - name: Cria as pastas para os dados e arquivos de registro do SQL Server\n      ansible.windows.win_powershell:\n        script: |\n          New-Item -ItemType directory -Path C:\\SQLData\n          New-Item -ItemType directory -Path C:\\SQLLog    \n\n    - name: \"Adicionando SQL ao dominio\"\n      win_domain_membership:\n        dns_domain_name: example-gcp.local\n        domain_admin_user: spirogiro@example-gcp.local\n        domain_admin_password: P@ssw0rd\n        state: domain\n      register: domain_state\n    - win_reboot:\n        pre_reboot_delay: 100\n      when: domain_state.reboot_required\n\n\n- name: Certifica que a instância do SQL1 esta pronta\n  hosts: sql1\n  tasks:\n    - name: Ingressando SQL1 ao Cluster\n      ansible.windows.win_powershell:\n        script: |\n          $node1 = \"bookshelf-sql1\"\n          $node2 = \"bookshelf-sql2\"\n          \n          $nameWSFC = \"bookshelf-dbclus\"\n          \n          $ipWSFC1 = \"10.3.0.4\"\n          $ipWSFC2 = \"10.4.0.4\"\n          \n          $ipWSListener1 = \"10.3.0.5\"\n          $ipWSListener2 = \"10.4.0.5\"\n          \n          $SQLServer1IsReady=$False\n          For ($i=0; $i -le 30; $i++) {\n              $SqlCatalog = \"master\"\n              $SqlConnection = New-Object System.Data.SqlClient.SqlConnection\n              $SqlConnection.ConnectionString = \"Server = $node1;\" + `\n                   \"Database = $SqlCatalog; Integrated Security = True\"\n              try {\n                  $SqlConnection.Open()\n                  Write-Host \"Connection to the server $node1 was successful\"\n                  $SQLServer1IsReady=$True\n                  $SqlConnection.Close()\n                  break\n              }\n              catch {\n                  Write-Host \"SQL server $node1 is not ready, waiting for 60s\"\n                  Start-Sleep -s 60 #Wait for 60 seconds\n              }\n          }\n          if($SQLServer1IsReady -eq $False) {\n              Write-Error \"$node1 is not responding. Was it deployed correctly?\"\n          }\n    \n- name: Certifica que a instância do SQL2 esta pronta\n  hosts: sql2\n  tasks:\n    - name: Ingressando SQL2 ao Cluster\n      ansible.windows.win_powershell:\n        script: |\n          $node1 = \"bookshelf-sql1\"\n          $node2 = \"bookshelf-sql2\"\n\n          $SQLServer2IsReady=$False\n          For ($i=0; $i -le 30; $i++) {\n              $SqlCatalog = \"master\"\n              $SqlConnection = New-Object System.Data.SqlClient.SqlConnection\n              $SqlConnection.ConnectionString = \"Server = $node2;\" + `\n                    \"Database = $SqlCatalog; Integrated Security = True\"\n              try {\n                  $SqlConnection.Open()\n                  Write-Host \"Connection to the server $node2 was successful\"\n                  $SQLServer2IsReady=$True\n                  $SqlConnection.Close()\n                  break\n              }\n              catch {\n                  Write-Host \"SQL server $node2 is not ready, waiting for 60s\"\n                  Start-Sleep -s 60 #Wait for 60 seconds\n              }\n          }\n          if($SQLServer2IsReady -eq $False) {\n              Write-Error \"$node2 is not responding. Was it deployed correctly?\"\n          }\n    \n- name: Criando o Cluster\n  hosts: sql1\n  tasks:\n    - name: Criando o Cluster\n      ansible.windows.win_powershell:\n        script: |\n          $node1 = \"bookshelf-sql1\"\n          $node2 = \"bookshelf-sql2\"\n          \n          $nameWSFC = \"bookshelf-dbclus\"\n          \n          $ipWSFC1 = \"10.3.0.4\"\n          $ipWSFC2 = \"10.4.0.4\"\n\n          New-Cluster -Name $nameWSFC -Node $node1, $node2 -NoStorage `\n              -StaticAddress $ipWSFC1, $ipWSFC2\n\n    - name: Ativa o recurso de grupos de disponibilidade\n      ansible.windows.win_powershell:\n        script: |\n          Enable-SqlAlwaysOn -ServerInstance $node1 -Force\n          Enable-SqlAlwaysOn -ServerInstance $node2 -Force\n\n- name: Configurando o Banco de Dados\n  hosts: sql1\n  tasks:\n    - name: Criando o Banco de Dados\n      ansible.windows.win_powershell:\n        script: |\n          $node1 = \"bookshelf-sql1\"\n\n          $CreateDatabaseSQLScript =  @\"\n          CREATE DATABASE bookshelf ON PRIMARY\n              (NAME = 'bookshelf_Data', FILENAME='C:\\SQLData\\bookshelf_data.mdf', SIZE =\n          256MB, MAXSIZE = UNLIMITED, FILEGROWTH = 256MB )\n              LOG ON (NAME = 'bookshelf_log', FILENAME='C:\\SQLLog\\bookshelf_log.ldf',\n          SIZE = 256MB, MAXSIZE = UNLIMITED, FILEGROWTH = 256MB )\n          GO\n          USE [bookshelf]\n          Exec dbo.sp_changedbowner @loginame = 'sa', @map = false;\n          ALTER DATABASE [bookshelf] SET RECOVERY FULL;\n          GO\n          BACKUP DATABASE bookshelf to disk =\n          '\\\\bookshelf-sql2\\SQLBackup\\bookshelf.bak' WITH INIT\n          GO\n          \"@\n          Invoke-Sqlcmd -Query $CreateDatabaseSQLScript -ServerInstance $node1\n\n    - name: Criando Tabela Books\n      ansible.windows.win_powershell:\n        script: |\n          $node1 = \"bookshelf-sql1\"\n          \n          $CreateTableSQLScript =  @\"\n          USE [bookshelf]\n          GO\n          SET ANSI_NULLS ON\n          GO\n          SET QUOTED_IDENTIFIER ON\n          GO\n          CREATE TABLE [dbo].[Books] (\n                      [Id] [bigint] IDENTITY(1,1) NOT NULL,\n                      [Title] [nvarchar](max) NOT NULL,\n                      [Author] [nvarchar](max) NULL,\n                      [PublishedDate] [datetime] NULL,\n                      [ImageUrl] [nvarchar](max) NULL,\n                      [Description] [nvarchar](max) NULL,\n                      [CreatedById] [nvarchar](max) NULL,\n          CONSTRAINT [PK_dbo.Books] PRIMARY KEY CLUSTERED\n              ([Id] ASC) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF,\n          IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n          ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\n          GO\n          \"@\n          Invoke-Sqlcmd -Query $CreateTableSQLScript -ServerInstance $node1\n\n    - name: Criando Tabela Books\n      ansible.windows.win_powershell:\n        script: |\n          $Domain = \"example-gcp.local\"\n          $ADControllerFQDN = \"bookshelf-ad.$Domain\"\n          $ServiceAccountName = \"sql.service\"\n          $ServiceAccountPrincipalName = \"$ServiceAccountName@$Domain\"\n          $node1 = \"bookshelf-sql1\"\n\n          $AddSQLServiceAccountScript =  @\"\n          USE [master]\n          GO\n              CREATE LOGIN [EXAMPLE-GCP\\sql.service] FROM WINDOWS WITH\n          DEFAULT_DATABASE=[bookshelf], DEFAULT_LANGUAGE=[us_english]\n          GO\n          USE [bookshelf]\n          GO\n          CREATE USER [EXAMPLE-GCP\\sql.service] FOR LOGIN [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_accessadmin] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_backupoperator] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_datareader] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_datawriter] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_ddladmin] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_owner] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_securityadmin] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          \"@\n          Invoke-Sqlcmd -Query $AddSQLServiceAccountScript -ServerInstance $node1\n\n    - name: Realizando Backup entre as replicas\n      ansible.windows.win_powershell:\n        script: |\n          $Database=\"bookshelf\"\n          $BackupFolder=\"SQLBackup\"\n          $node1 = \"bookshelf-sql1\"\n          $node2 = \"bookshelf-sql2\"\n          $SharedLocation=\"\\\\$node2\\$BackupFolder\"\n          $ListenerName=\"sql-listener\"\n          $AGName=\"MainAG\"\n          $PrimaryServer = \"$node1.$Domain\\MSSQLSERVER\"\n          $SecondaryServer = \"$node2.$Domain\\MSSQLSERVER\"\n\n          Backup-SqlDatabase `\n              -Database $Database -Initialize `\n              -BackupFile \"$SharedLocation\\$Database.bak\" `\n              -ServerInstance $node1\n\n          Restore-SqlDatabase `\n              -Database $Database `\n              -BackupFile \"$SharedLocation\\$Database.bak\" `\n              -ServerInstance $node2 `\n              -NORECOVERY\n\n          Backup-SqlDatabase `\n              -Database $Database -Initialize `\n              -BackupFile \"$SharedLocation\\$Database.log\" `\n              -ServerInstance $node1 `\n              -BackupAction Log\n\n          Restore-SqlDatabase `\n              -Database $Database `\n              -BackupFile \"$SharedLocation\\$Database.log\" `\n              -ServerInstance $node2 `\n              -RestoreAction Log `\n              -NORECOVERY\n\n    - name: Permissões para DCOM/RL/RA\n      ansible.windows.win_powershell:\n        script: |\n          $Principal = \"example-gcp.local\\sql.service\"\n          $Computers = \"bookshelf-sql2\"\n\n          function get-sid\n          {\n          PARAM ($DSIdentity)\n          $ID = new-object System.Security.Principal.NTAccount($DSIdentity)\n          return $ID.Translate( [System.Security.Principal.SecurityIdentifier] ).toString()\n          }\n\n          $sid = get-sid $Principal\n\n          #DefaultLaunchPermission - Local Launch, Remote Launch, Local Activation, Remote Activation\n          $DCOMSDDLDefaultLaunchPermission = \"A;;CCDCLCSWRP;;;$sid\"\n\n          #DefaultAccessPermision - Local Access, Remote Access\n          $DCOMSDDLDefaultAccessPermision = \"A;;CCDCLC;;;$sid\"\n\n          #PartialMatch\n          $DCOMSDDLPartialMatch = \"A;;\\w+;;;$sid\"\n\n          foreach ($strcomputer in $computers)\n          {\n          write-host \"`nWorking on $strcomputer with principal $Principal ($sid):\"\n          # Get the respective binary values of the DCOM registry entries\n          $Reg = [WMIClass]\"\\\\$strcomputer\\root\\default:StdRegProv\"\n          $DCOMDefaultLaunchPermission = $Reg.GetBinaryValue(2147483650,\"software\\microsoft\\ole\",\"DefaultLaunchPermission\").uValue\n          $DCOMDefaultAccessPermission = $Reg.GetBinaryValue(2147483650,\"software\\microsoft\\ole\",\"DefaultAccessPermission\").uValue\n\n          # Convert the current permissions to SDDL\n          write-host \"`tConverting current permissions to SDDL format...\"\n          $converter = new-object system.management.ManagementClass Win32_SecurityDescriptorHelper\n          $CurrentDCOMSDDLDefaultLaunchPermission = $converter.BinarySDToSDDL($DCOMDefaultLaunchPermission)\n          $CurrentDCOMSDDLDefaultAccessPermission = $converter.BinarySDToSDDL($DCOMDefaultAccessPermission)\n\n          # Build the new permissions\n          if (($CurrentDCOMSDDLDefaultLaunchPermission.SDDL -match $DCOMSDDLPartialMatch) -and ($CurrentDCOMSDDLDefaultLaunchPermission.SDDL -notmatch $DCOMSDDLDefaultLaunchPermission))\n          {\n            $NewDCOMSDDLDefaultLaunchPermission = $CurrentDCOMSDDLDefaultLaunchPermission.SDDL -replace $DCOMSDDLPartialMatch, $DCOMSDDLDefaultLaunchPermission\n          }\n          else\n          {\n            $NewDCOMSDDLDefaultLaunchPermission = $CurrentDCOMSDDLDefaultLaunchPermission.SDDL + \"(\" + $DCOMSDDLDefaultLaunchPermission + \")\"\n          }\n\n          if (($CurrentDCOMSDDLDefaultAccessPermission.SDDL -match $DCOMSDDLPartialMatch) -and ($CurrentDCOMSDDLDefaultAccessPermission.SDDL -notmatch $DCOMSDDLDefaultAccessPermision))\n          {\n            $NewDCOMSDDLDefaultAccessPermission = $CurrentDCOMSDDLDefaultAccessPermission.SDDL -replace $DCOMSDDLPartialMatch, $DCOMSDDLDefaultAccessPermision\n          }\n          else\n          {\n            $NewDCOMSDDLDefaultAccessPermission = $CurrentDCOMSDDLDefaultAccessPermission.SDDL + \"(\" + $DCOMSDDLDefaultAccessPermision + \")\"\n          }\n\n          # Convert SDDL back to Binary\n          write-host \"`tConverting SDDL back into binary form...\"\n          $DCOMbinarySDDefaultLaunchPermission = $converter.SDDLToBinarySD($NewDCOMSDDLDefaultLaunchPermission)\n          $DCOMconvertedPermissionDefaultLaunchPermission = ,$DCOMbinarySDDefaultLaunchPermission.BinarySD\n\n          $DCOMbinarySDDefaultAccessPermission = $converter.SDDLToBinarySD($NewDCOMSDDLDefaultAccessPermission)\n          $DCOMconvertedPermissionsDefaultAccessPermission = ,$DCOMbinarySDDefaultAccessPermission.BinarySD\n\n          # Apply the changes\n          write-host \"`tApplying changes...\"\n          if ($CurrentDCOMSDDLDefaultLaunchPermission.SDDL -match $DCOMSDDLDefaultLaunchPermission)\n          {\n            write-host \"`t`tCurrent DefaultLaunchPermission matches desired value.\"\n          }\n          else\n          {\n            $result = $Reg.SetBinaryValue(2147483650,\"software\\microsoft\\ole\",\"DefaultLaunchPermission\", $DCOMbinarySDDefaultLaunchPermission.binarySD)\n            if($result.ReturnValue='0'){write-host \"  Applied DefaultLaunchPermission complete.\"}\n          }\n\n          if ($CurrentDCOMSDDLDefaultAccessPermission.SDDL -match $DCOMSDDLDefaultAccessPermision)\n          {\n            write-host \"`t`tCurrent DefaultAccessPermission matches desired value.\"\n          }\n          else\n          {\n            $result = $Reg.SetBinaryValue(2147483650,\"software\\microsoft\\ole\",\"DefaultAccessPermission\", $DCOMbinarySDDefaultAccessPermission.binarySD)\n            if($result.ReturnValue='0'){write-host \"  Applied DefaultAccessPermission complete.\"}\n\n          }\n          }\n          #----------------------------------------------------------------------------------------------------------\n          trap\n          {\n          $exMessage = $_.Exception.Message\n          if($exMessage.StartsWith(\"L:\"))\n          {write-host \"`n\" $exMessage.substring(2) \"`n\" -foregroundcolor white -backgroundcolor darkblue}\n          else {write-host \"`nError: \" $exMessage \"`n\" -foregroundcolor white -backgroundcolor darkred}\n          Exit\n          }\n          #----------------------------------------------------------------------------------------------------------\n\n#    - name: Inicializando os endpoints\n#      ansible.windows.win_powershell:\n#        script: |\n#          $Database=\"bookshelf\"\n#          $BackupFolder=\"SQLBackup\"\n#          $node1 = \"bookshelf-sql1\"\n#          $node2 = \"bookshelf-sql2\"\n#          $Domain = \"example-gcp.local\"\n#          $SharedLocation=\"\\\\$node2\\$BackupFolder\"\n#          $ListenerName=\"sql-listener\"\n#          $AGName=\"MainAG\"\n#          $PrimaryServer = \"$node1.$Domain\\MSSQLSERVER\"\n#          $SecondaryServer = \"$node2.$Domain\\MSSQLSERVER\"\n#          \n#          $endpoint1=New-SqlHADREndpoint -Port 5022 -Owner sa `\n#              -Encryption Supported -EncryptionAlgorithm Aes `\n#              -Name AlwaysonEndpoint1 `\n#              -Path \"SQLSERVER:\\SQL\\$node1.$Domain\\Default\"\n#          Set-SqlHADREndpoint -InputObject $endpoint1 -State Started\n#          $endpoint2=New-SqlHADREndpoint -Port 5022 -Owner sa `\n#              -Encryption Supported -EncryptionAlgorithm Aes `\n#              -Name AlwaysonEndpoint2 `\n#              -Path \"SQLSERVER:\\SQL\\$node2.$Domain\\Default\"\n#          Set-SqlHADREndpoint -InputObject $endpoint2 -State Started",
            "template": "---\n- name: Configuração SQL1\n  hosts: sql1\n  tasks:\n    - name: \"Alterando hostname e reiniciando\"\n      win_hostname:\n        name: bookshelf-sql1\n      register: iis\n    - win_reboot:\n      when: iis.reboot_required \n\n- name: Configuração SQL2\n  hosts: sql2\n  tasks:\n    - name: \"Alterando hostname e reiniciando\"\n      win_hostname:\n        name: bookshelf-sql2\n      register: iis\n    - win_reboot:\n      when: iis.reboot_required\n    \n    - name: Cria pasta para backups de banco de dados e compartilha\n      ansible.windows.win_powershell:\n        script: |\n          New-Item -ItemType directory -Path C:\\SQLBackup\n          New-SMBShare -Name SQLBackup -Path C:\\SQLBackup -FullAccess \"Authenticated Users\"\n\n- name: Configuraçao Rede e instalações\n  hosts: sql1:sql2\n  tasks:\n    - name: \"Colocando DNS do dominio na instancia\"\n      ansible.windows.win_dns_client:\n        adapter_names: Ethernet\n        dns_servers: ${ip_instancia_interno_ad}\n\n    - name: Adiciona regras de firewall do Windows\n      ansible.windows.win_powershell:\n        script: |\n          netsh firewall set service remoteadmin\n          netsh advfirewall firewall add rule name=\"5022 for Avail Groups\" dir=in action=allow protocol=TCP localport=5022\n          netsh advfirewall firewall add rule name=\"1433 for SQL Server\" dir=in action=allow protocol=TCP localport=1433\n\n    - name: Instala o recurso de cluster de failover\n      win_feature: \n       name: \"Failover-Clustering\"\n       state: present\n       include_sub_features: true\n       include_management_tools: true\n\n    - name: Cria as pastas para os dados e arquivos de registro do SQL Server\n      ansible.windows.win_powershell:\n        script: |\n          New-Item -ItemType directory -Path C:\\SQLData\n          New-Item -ItemType directory -Path C:\\SQLLog    \n\n    - name: \"Adicionando SQL ao dominio\"\n      win_domain_membership:\n        dns_domain_name: example-gcp.local\n        domain_admin_user: spirogiro@example-gcp.local\n        domain_admin_password: P@ssw0rd\n        state: domain\n      register: domain_state\n    - win_reboot:\n        pre_reboot_delay: 100\n      when: domain_state.reboot_required\n\n\n- name: Certifica que a instância do SQL1 esta pronta\n  hosts: sql1\n  tasks:\n    - name: Ingressando SQL1 ao Cluster\n      ansible.windows.win_powershell:\n        script: |\n          $node1 = \"bookshelf-sql1\"\n          $node2 = \"bookshelf-sql2\"\n          \n          $nameWSFC = \"bookshelf-dbclus\"\n          \n          $ipWSFC1 = \"10.3.0.4\"\n          $ipWSFC2 = \"10.4.0.4\"\n          \n          $ipWSListener1 = \"10.3.0.5\"\n          $ipWSListener2 = \"10.4.0.5\"\n          \n          $SQLServer1IsReady=$False\n          For ($i=0; $i -le 30; $i++) {\n              $SqlCatalog = \"master\"\n              $SqlConnection = New-Object System.Data.SqlClient.SqlConnection\n              $SqlConnection.ConnectionString = \"Server = $node1;\" + `\n                   \"Database = $SqlCatalog; Integrated Security = True\"\n              try {\n                  $SqlConnection.Open()\n                  Write-Host \"Connection to the server $node1 was successful\"\n                  $SQLServer1IsReady=$True\n                  $SqlConnection.Close()\n                  break\n              }\n              catch {\n                  Write-Host \"SQL server $node1 is not ready, waiting for 60s\"\n                  Start-Sleep -s 60 #Wait for 60 seconds\n              }\n          }\n          if($SQLServer1IsReady -eq $False) {\n              Write-Error \"$node1 is not responding. Was it deployed correctly?\"\n          }\n    \n- name: Certifica que a instância do SQL2 esta pronta\n  hosts: sql2\n  tasks:\n    - name: Ingressando SQL2 ao Cluster\n      ansible.windows.win_powershell:\n        script: |\n          $node1 = \"bookshelf-sql1\"\n          $node2 = \"bookshelf-sql2\"\n\n          $SQLServer2IsReady=$False\n          For ($i=0; $i -le 30; $i++) {\n              $SqlCatalog = \"master\"\n              $SqlConnection = New-Object System.Data.SqlClient.SqlConnection\n              $SqlConnection.ConnectionString = \"Server = $node2;\" + `\n                    \"Database = $SqlCatalog; Integrated Security = True\"\n              try {\n                  $SqlConnection.Open()\n                  Write-Host \"Connection to the server $node2 was successful\"\n                  $SQLServer2IsReady=$True\n                  $SqlConnection.Close()\n                  break\n              }\n              catch {\n                  Write-Host \"SQL server $node2 is not ready, waiting for 60s\"\n                  Start-Sleep -s 60 #Wait for 60 seconds\n              }\n          }\n          if($SQLServer2IsReady -eq $False) {\n              Write-Error \"$node2 is not responding. Was it deployed correctly?\"\n          }\n    \n- name: Criando o Cluster\n  hosts: sql1\n  tasks:\n    - name: Criando o Cluster\n      ansible.windows.win_powershell:\n        script: |\n          $node1 = \"bookshelf-sql1\"\n          $node2 = \"bookshelf-sql2\"\n          \n          $nameWSFC = \"bookshelf-dbclus\"\n          \n          $ipWSFC1 = \"10.3.0.4\"\n          $ipWSFC2 = \"10.4.0.4\"\n\n          New-Cluster -Name $nameWSFC -Node $node1, $node2 -NoStorage `\n              -StaticAddress $ipWSFC1, $ipWSFC2\n\n    - name: Ativa o recurso de grupos de disponibilidade\n      ansible.windows.win_powershell:\n        script: |\n          Enable-SqlAlwaysOn -ServerInstance $node1 -Force\n          Enable-SqlAlwaysOn -ServerInstance $node2 -Force\n\n- name: Configurando o Banco de Dados\n  hosts: sql1\n  tasks:\n    - name: Criando o Banco de Dados\n      ansible.windows.win_powershell:\n        script: |\n          $node1 = \"bookshelf-sql1\"\n\n          $CreateDatabaseSQLScript =  @\"\n          CREATE DATABASE bookshelf ON PRIMARY\n              (NAME = 'bookshelf_Data', FILENAME='C:\\SQLData\\bookshelf_data.mdf', SIZE =\n          256MB, MAXSIZE = UNLIMITED, FILEGROWTH = 256MB )\n              LOG ON (NAME = 'bookshelf_log', FILENAME='C:\\SQLLog\\bookshelf_log.ldf',\n          SIZE = 256MB, MAXSIZE = UNLIMITED, FILEGROWTH = 256MB )\n          GO\n          USE [bookshelf]\n          Exec dbo.sp_changedbowner @loginame = 'sa', @map = false;\n          ALTER DATABASE [bookshelf] SET RECOVERY FULL;\n          GO\n          BACKUP DATABASE bookshelf to disk =\n          '\\\\bookshelf-sql2\\SQLBackup\\bookshelf.bak' WITH INIT\n          GO\n          \"@\n          Invoke-Sqlcmd -Query $CreateDatabaseSQLScript -ServerInstance $node1\n\n    - name: Criando Tabela Books\n      ansible.windows.win_powershell:\n        script: |\n          $node1 = \"bookshelf-sql1\"\n          \n          $CreateTableSQLScript =  @\"\n          USE [bookshelf]\n          GO\n          SET ANSI_NULLS ON\n          GO\n          SET QUOTED_IDENTIFIER ON\n          GO\n          CREATE TABLE [dbo].[Books] (\n                      [Id] [bigint] IDENTITY(1,1) NOT NULL,\n                      [Title] [nvarchar](max) NOT NULL,\n                      [Author] [nvarchar](max) NULL,\n                      [PublishedDate] [datetime] NULL,\n                      [ImageUrl] [nvarchar](max) NULL,\n                      [Description] [nvarchar](max) NULL,\n                      [CreatedById] [nvarchar](max) NULL,\n          CONSTRAINT [PK_dbo.Books] PRIMARY KEY CLUSTERED\n              ([Id] ASC) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF,\n          IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n          ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\n          GO\n          \"@\n          Invoke-Sqlcmd -Query $CreateTableSQLScript -ServerInstance $node1\n\n    - name: Criando Tabela Books\n      ansible.windows.win_powershell:\n        script: |\n          $Domain = \"example-gcp.local\"\n          $ADControllerFQDN = \"bookshelf-ad.$Domain\"\n          $ServiceAccountName = \"sql.service\"\n          $ServiceAccountPrincipalName = \"$ServiceAccountName@$Domain\"\n          $node1 = \"bookshelf-sql1\"\n\n          $AddSQLServiceAccountScript =  @\"\n          USE [master]\n          GO\n              CREATE LOGIN [EXAMPLE-GCP\\sql.service] FROM WINDOWS WITH\n          DEFAULT_DATABASE=[bookshelf], DEFAULT_LANGUAGE=[us_english]\n          GO\n          USE [bookshelf]\n          GO\n          CREATE USER [EXAMPLE-GCP\\sql.service] FOR LOGIN [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_accessadmin] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_backupoperator] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_datareader] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_datawriter] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_ddladmin] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_owner] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_securityadmin] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          \"@\n          Invoke-Sqlcmd -Query $AddSQLServiceAccountScript -ServerInstance $node1\n\n    - name: Realizando Backup entre as replicas\n      ansible.windows.win_powershell:\n        script: |\n          $Database=\"bookshelf\"\n          $BackupFolder=\"SQLBackup\"\n          $node1 = \"bookshelf-sql1\"\n          $node2 = \"bookshelf-sql2\"\n          $SharedLocation=\"\\\\$node2\\$BackupFolder\"\n          $ListenerName=\"sql-listener\"\n          $AGName=\"MainAG\"\n          $PrimaryServer = \"$node1.$Domain\\MSSQLSERVER\"\n          $SecondaryServer = \"$node2.$Domain\\MSSQLSERVER\"\n\n          Backup-SqlDatabase `\n              -Database $Database -Initialize `\n              -BackupFile \"$SharedLocation\\$Database.bak\" `\n              -ServerInstance $node1\n\n          Restore-SqlDatabase `\n              -Database $Database `\n              -BackupFile \"$SharedLocation\\$Database.bak\" `\n              -ServerInstance $node2 `\n              -NORECOVERY\n\n          Backup-SqlDatabase `\n              -Database $Database -Initialize `\n              -BackupFile \"$SharedLocation\\$Database.log\" `\n              -ServerInstance $node1 `\n              -BackupAction Log\n\n          Restore-SqlDatabase `\n              -Database $Database `\n              -BackupFile \"$SharedLocation\\$Database.log\" `\n              -ServerInstance $node2 `\n              -RestoreAction Log `\n              -NORECOVERY\n\n    - name: Permissões para DCOM/RL/RA\n      ansible.windows.win_powershell:\n        script: |\n          $Principal = \"example-gcp.local\\sql.service\"\n          $Computers = \"bookshelf-sql2\"\n\n          function get-sid\n          {\n          PARAM ($DSIdentity)\n          $ID = new-object System.Security.Principal.NTAccount($DSIdentity)\n          return $ID.Translate( [System.Security.Principal.SecurityIdentifier] ).toString()\n          }\n\n          $sid = get-sid $Principal\n\n          #DefaultLaunchPermission - Local Launch, Remote Launch, Local Activation, Remote Activation\n          $DCOMSDDLDefaultLaunchPermission = \"A;;CCDCLCSWRP;;;$sid\"\n\n          #DefaultAccessPermision - Local Access, Remote Access\n          $DCOMSDDLDefaultAccessPermision = \"A;;CCDCLC;;;$sid\"\n\n          #PartialMatch\n          $DCOMSDDLPartialMatch = \"A;;\\w+;;;$sid\"\n\n          foreach ($strcomputer in $computers)\n          {\n          write-host \"`nWorking on $strcomputer with principal $Principal ($sid):\"\n          # Get the respective binary values of the DCOM registry entries\n          $Reg = [WMIClass]\"\\\\$strcomputer\\root\\default:StdRegProv\"\n          $DCOMDefaultLaunchPermission = $Reg.GetBinaryValue(2147483650,\"software\\microsoft\\ole\",\"DefaultLaunchPermission\").uValue\n          $DCOMDefaultAccessPermission = $Reg.GetBinaryValue(2147483650,\"software\\microsoft\\ole\",\"DefaultAccessPermission\").uValue\n\n          # Convert the current permissions to SDDL\n          write-host \"`tConverting current permissions to SDDL format...\"\n          $converter = new-object system.management.ManagementClass Win32_SecurityDescriptorHelper\n          $CurrentDCOMSDDLDefaultLaunchPermission = $converter.BinarySDToSDDL($DCOMDefaultLaunchPermission)\n          $CurrentDCOMSDDLDefaultAccessPermission = $converter.BinarySDToSDDL($DCOMDefaultAccessPermission)\n\n          # Build the new permissions\n          if (($CurrentDCOMSDDLDefaultLaunchPermission.SDDL -match $DCOMSDDLPartialMatch) -and ($CurrentDCOMSDDLDefaultLaunchPermission.SDDL -notmatch $DCOMSDDLDefaultLaunchPermission))\n          {\n            $NewDCOMSDDLDefaultLaunchPermission = $CurrentDCOMSDDLDefaultLaunchPermission.SDDL -replace $DCOMSDDLPartialMatch, $DCOMSDDLDefaultLaunchPermission\n          }\n          else\n          {\n            $NewDCOMSDDLDefaultLaunchPermission = $CurrentDCOMSDDLDefaultLaunchPermission.SDDL + \"(\" + $DCOMSDDLDefaultLaunchPermission + \")\"\n          }\n\n          if (($CurrentDCOMSDDLDefaultAccessPermission.SDDL -match $DCOMSDDLPartialMatch) -and ($CurrentDCOMSDDLDefaultAccessPermission.SDDL -notmatch $DCOMSDDLDefaultAccessPermision))\n          {\n            $NewDCOMSDDLDefaultAccessPermission = $CurrentDCOMSDDLDefaultAccessPermission.SDDL -replace $DCOMSDDLPartialMatch, $DCOMSDDLDefaultAccessPermision\n          }\n          else\n          {\n            $NewDCOMSDDLDefaultAccessPermission = $CurrentDCOMSDDLDefaultAccessPermission.SDDL + \"(\" + $DCOMSDDLDefaultAccessPermision + \")\"\n          }\n\n          # Convert SDDL back to Binary\n          write-host \"`tConverting SDDL back into binary form...\"\n          $DCOMbinarySDDefaultLaunchPermission = $converter.SDDLToBinarySD($NewDCOMSDDLDefaultLaunchPermission)\n          $DCOMconvertedPermissionDefaultLaunchPermission = ,$DCOMbinarySDDefaultLaunchPermission.BinarySD\n\n          $DCOMbinarySDDefaultAccessPermission = $converter.SDDLToBinarySD($NewDCOMSDDLDefaultAccessPermission)\n          $DCOMconvertedPermissionsDefaultAccessPermission = ,$DCOMbinarySDDefaultAccessPermission.BinarySD\n\n          # Apply the changes\n          write-host \"`tApplying changes...\"\n          if ($CurrentDCOMSDDLDefaultLaunchPermission.SDDL -match $DCOMSDDLDefaultLaunchPermission)\n          {\n            write-host \"`t`tCurrent DefaultLaunchPermission matches desired value.\"\n          }\n          else\n          {\n            $result = $Reg.SetBinaryValue(2147483650,\"software\\microsoft\\ole\",\"DefaultLaunchPermission\", $DCOMbinarySDDefaultLaunchPermission.binarySD)\n            if($result.ReturnValue='0'){write-host \"  Applied DefaultLaunchPermission complete.\"}\n          }\n\n          if ($CurrentDCOMSDDLDefaultAccessPermission.SDDL -match $DCOMSDDLDefaultAccessPermision)\n          {\n            write-host \"`t`tCurrent DefaultAccessPermission matches desired value.\"\n          }\n          else\n          {\n            $result = $Reg.SetBinaryValue(2147483650,\"software\\microsoft\\ole\",\"DefaultAccessPermission\", $DCOMbinarySDDefaultAccessPermission.binarySD)\n            if($result.ReturnValue='0'){write-host \"  Applied DefaultAccessPermission complete.\"}\n\n          }\n          }\n          #----------------------------------------------------------------------------------------------------------\n          trap\n          {\n          $exMessage = $_.Exception.Message\n          if($exMessage.StartsWith(\"L:\"))\n          {write-host \"`n\" $exMessage.substring(2) \"`n\" -foregroundcolor white -backgroundcolor darkblue}\n          else {write-host \"`nError: \" $exMessage \"`n\" -foregroundcolor white -backgroundcolor darkred}\n          Exit\n          }\n          #----------------------------------------------------------------------------------------------------------\n\n#    - name: Inicializando os endpoints\n#      ansible.windows.win_powershell:\n#        script: |\n#          $Database=\"bookshelf\"\n#          $BackupFolder=\"SQLBackup\"\n#          $node1 = \"bookshelf-sql1\"\n#          $node2 = \"bookshelf-sql2\"\n#          $Domain = \"example-gcp.local\"\n#          $SharedLocation=\"\\\\$node2\\$BackupFolder\"\n#          $ListenerName=\"sql-listener\"\n#          $AGName=\"MainAG\"\n#          $PrimaryServer = \"$node1.$Domain\\MSSQLSERVER\"\n#          $SecondaryServer = \"$node2.$Domain\\MSSQLSERVER\"\n#          \n#          $endpoint1=New-SqlHADREndpoint -Port 5022 -Owner sa `\n#              -Encryption Supported -EncryptionAlgorithm Aes `\n#              -Name AlwaysonEndpoint1 `\n#              -Path \"SQLSERVER:\\SQL\\$node1.$Domain\\Default\"\n#          Set-SqlHADREndpoint -InputObject $endpoint1 -State Started\n#          $endpoint2=New-SqlHADREndpoint -Port 5022 -Owner sa `\n#              -Encryption Supported -EncryptionAlgorithm Aes `\n#              -Name AlwaysonEndpoint2 `\n#              -Path \"SQLSERVER:\\SQL\\$node2.$Domain\\Default\"\n#          Set-SqlHADREndpoint -InputObject $endpoint2 -State Started",
            "vars": {
              "ip_instancia_interno_ad": "10.1.0.100",
              "ip_instancia_sql": "35.198.55.138"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "script-monitora",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "a40d12b60ca4a54dd7f18330efdea1ac7d0cec1a683750f94c5af49fcd50d025",
            "rendered": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar link = \"35.247.225.182\"\n\nfunc main() {\n\n\tsite := (\"https://\" + link)\n\tresposta, _ := http.Get(site)\n\n\tif resposta.StatusCode == 200 {\n\t\tfmt.Println(\"Acesso está OK! \\n --- \\n\", resposta)\n\t} else {\n\t\tfmt.Println(\"Falha ao acessar: \\n --- \\n\", resposta)\n\t}\n\n}\n",
            "template": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar link = \"${url_instancia}\"\n\nfunc main() {\n\n\tsite := (\"https://\" + link)\n\tresposta, _ := http.Get(site)\n\n\tif resposta.StatusCode == 200 {\n\t\tfmt.Println(\"Acesso está OK! \\n --- \\n\", resposta)\n\t} else {\n\t\tfmt.Println(\"Falha ao acessar: \\n --- \\n\", resposta)\n\t}\n\n}\n",
            "vars": {
              "url_instancia": "35.247.225.182"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_firewall",
      "name": "tcp-rule",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "allow": [
              {
                "ports": [
                  "0-65535"
                ],
                "protocol": "tcp"
              },
              {
                "ports": [
                  "0-65535"
                ],
                "protocol": "udp"
              },
              {
                "ports": [
                  "5985",
                  "5986"
                ],
                "protocol": "tcp"
              },
              {
                "ports": [],
                "protocol": "icmp"
              }
            ],
            "creation_timestamp": "2022-08-05T13:30:59.400-07:00",
            "deny": [],
            "description": "",
            "destination_ranges": [],
            "direction": "INGRESS",
            "disabled": false,
            "enable_logging": null,
            "id": "projects/develop-356920/global/firewalls/iis-tcp-rule",
            "log_config": [],
            "name": "iis-tcp-rule",
            "network": "https://www.googleapis.com/compute/v1/projects/develop-356920/global/networks/iis-net-sql",
            "priority": 1000,
            "project": "develop-356920",
            "self_link": "https://www.googleapis.com/compute/v1/projects/develop-356920/global/firewalls/iis-tcp-rule",
            "source_ranges": [
              "10.3.0.0/24",
              "10.4.0.0/24"
            ],
            "source_service_accounts": null,
            "source_tags": null,
            "target_service_accounts": null,
            "target_tags": null,
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_network.sql"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_firewall",
      "name": "winrm",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "allow": [
              {
                "ports": [
                  "3389"
                ],
                "protocol": "tcp"
              },
              {
                "ports": [
                  "5985",
                  "5986"
                ],
                "protocol": "tcp"
              }
            ],
            "creation_timestamp": "2022-08-05T13:30:59.352-07:00",
            "deny": [],
            "description": "",
            "destination_ranges": [],
            "direction": "INGRESS",
            "disabled": false,
            "enable_logging": null,
            "id": "projects/develop-356920/global/firewalls/iis-winrm-rule",
            "log_config": [],
            "name": "iis-winrm-rule",
            "network": "https://www.googleapis.com/compute/v1/projects/develop-356920/global/networks/iis-net-sql",
            "priority": 1000,
            "project": "develop-356920",
            "self_link": "https://www.googleapis.com/compute/v1/projects/develop-356920/global/firewalls/iis-winrm-rule",
            "source_ranges": [
              "0.0.0.0/0"
            ],
            "source_service_accounts": null,
            "source_tags": null,
            "target_service_accounts": null,
            "target_tags": null,
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_network.sql"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "instancia-ad",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/develop-356920/global/images/windows-server-winrm-local-ad",
                    "labels": {},
                    "size": 50,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/develop-356920/zones/southamerica-east1-a/disks/bookshelf-ad"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/develop-356920/zones/southamerica-east1-a/instances/bookshelf-ad",
            "instance_id": "7656219648584630516",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "n1-standard-2",
            "metadata": null,
            "metadata_fingerprint": "LsY9pRT9fUs=",
            "metadata_startup_script": null,
            "min_cpu_platform": "",
            "name": "bookshelf-ad",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "35.247.221.53",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/develop-356920/global/networks/iis-net-sql",
                "network_ip": "10.1.0.100",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/develop-356920/regions/southamerica-east1/subnetworks/ad-subnet-1",
                "subnetwork_project": "develop-356920"
              }
            ],
            "project": "develop-356920",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/develop-356920/zones/southamerica-east1-a/instances/bookshelf-ad",
            "service_account": [
              {
                "email": "668592541933-compute@developer.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/compute.readonly",
                  "https://www.googleapis.com/auth/devstorage.read_only",
                  "https://www.googleapis.com/auth/userinfo.email"
                ]
              }
            ],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "timeouts": null,
            "zone": "southamerica-east1-a"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.sql",
            "google_compute_subnetwork.ad1"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "instancia-iis",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/develop-356920/global/images/windows-server-winrm-local-core",
                    "labels": {},
                    "size": 50,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/develop-356920/zones/southamerica-east1-a/disks/bookshelf-iis"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/develop-356920/zones/southamerica-east1-a/instances/bookshelf-iis",
            "instance_id": "7729855776247824627",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "n1-standard-2",
            "metadata": null,
            "metadata_fingerprint": "LsY9pRT9fUs=",
            "metadata_startup_script": null,
            "min_cpu_platform": "",
            "name": "bookshelf-iis",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "35.247.225.182",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/develop-356920/global/networks/iis-net-sql",
                "network_ip": "10.3.0.9",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/develop-356920/regions/southamerica-east1/subnetworks/private-sql-1",
                "subnetwork_project": "develop-356920"
              }
            ],
            "project": "develop-356920",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/develop-356920/zones/southamerica-east1-a/instances/bookshelf-iis",
            "service_account": [
              {
                "email": "668592541933-compute@developer.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/compute.readonly",
                  "https://www.googleapis.com/auth/devstorage.read_only",
                  "https://www.googleapis.com/auth/userinfo.email"
                ]
              }
            ],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "timeouts": null,
            "zone": "southamerica-east1-a"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.sql",
            "google_compute_subnetwork.sql1"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "instancia-sql-1",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/develop-356920/global/images/windows-server-winrm-local-core",
                    "labels": {},
                    "size": 50,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/develop-356920/zones/southamerica-east1-a/disks/bookshelf-sql1"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/develop-356920/zones/southamerica-east1-a/instances/bookshelf-sql1",
            "instance_id": "4217035302256034034",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "n1-standard-2",
            "metadata": null,
            "metadata_fingerprint": "LsY9pRT9fUs=",
            "metadata_startup_script": null,
            "min_cpu_platform": "",
            "name": "bookshelf-sql1",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "34.95.241.200",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/develop-356920/global/networks/iis-net-sql",
                "network_ip": "10.3.0.2",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/develop-356920/regions/southamerica-east1/subnetworks/private-sql-1",
                "subnetwork_project": "develop-356920"
              }
            ],
            "project": "develop-356920",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/develop-356920/zones/southamerica-east1-a/instances/bookshelf-sql1",
            "service_account": [
              {
                "email": "668592541933-compute@developer.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/compute.readonly",
                  "https://www.googleapis.com/auth/devstorage.read_only",
                  "https://www.googleapis.com/auth/userinfo.email"
                ]
              }
            ],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "timeouts": null,
            "zone": "southamerica-east1-a"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.sql",
            "google_compute_subnetwork.sql1",
            "google_compute_subnetwork.sql2"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "instancia-sql-2",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/develop-356920/global/images/windows-server-winrm-local-core",
                    "labels": {},
                    "size": 50,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/develop-356920/zones/southamerica-east1-a/disks/bookshelf-sql2"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/develop-356920/zones/southamerica-east1-a/instances/bookshelf-sql2",
            "instance_id": "6753749558297149682",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "n1-standard-2",
            "metadata": null,
            "metadata_fingerprint": "LsY9pRT9fUs=",
            "metadata_startup_script": null,
            "min_cpu_platform": "",
            "name": "bookshelf-sql2",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "35.198.55.138",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/develop-356920/global/networks/iis-net-sql",
                "network_ip": "10.4.0.2",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/develop-356920/regions/southamerica-east1/subnetworks/private-sql-2",
                "subnetwork_project": "develop-356920"
              }
            ],
            "project": "develop-356920",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/develop-356920/zones/southamerica-east1-a/instances/bookshelf-sql2",
            "service_account": [
              {
                "email": "668592541933-compute@developer.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/compute.readonly",
                  "https://www.googleapis.com/auth/devstorage.read_only",
                  "https://www.googleapis.com/auth/userinfo.email"
                ]
              }
            ],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "timeouts": null,
            "zone": "southamerica-east1-a"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.sql",
            "google_compute_subnetwork.sql1",
            "google_compute_subnetwork.sql2"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_network",
      "name": "sql",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "auto_create_subnetworks": true,
            "delete_default_routes_on_create": false,
            "description": "",
            "gateway_ipv4": "",
            "id": "projects/develop-356920/global/networks/iis-net-sql",
            "mtu": 0,
            "name": "iis-net-sql",
            "project": "develop-356920",
            "routing_mode": "REGIONAL",
            "self_link": "https://www.googleapis.com/compute/v1/projects/develop-356920/global/networks/iis-net-sql",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19"
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_subnetwork",
      "name": "ad1",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "creation_timestamp": "2022-08-05T13:31:00.262-07:00",
            "description": "",
            "external_ipv6_prefix": "",
            "fingerprint": null,
            "gateway_address": "10.1.0.1",
            "id": "projects/develop-356920/regions/southamerica-east1/subnetworks/ad-subnet-1",
            "ip_cidr_range": "10.1.0.0/24",
            "ipv6_access_type": "",
            "ipv6_cidr_range": "",
            "log_config": [],
            "name": "ad-subnet-1",
            "network": "https://www.googleapis.com/compute/v1/projects/develop-356920/global/networks/iis-net-sql",
            "private_ip_google_access": false,
            "private_ipv6_google_access": "DISABLE_GOOGLE_ACCESS",
            "project": "develop-356920",
            "purpose": "PRIVATE",
            "region": "southamerica-east1",
            "role": "",
            "secondary_ip_range": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/develop-356920/regions/southamerica-east1/subnetworks/ad-subnet-1",
            "stack_type": "IPV4_ONLY",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_network.sql"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_subnetwork",
      "name": "sql1",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "creation_timestamp": "2022-08-05T13:31:00.816-07:00",
            "description": "",
            "external_ipv6_prefix": "",
            "fingerprint": null,
            "gateway_address": "10.3.0.1",
            "id": "projects/develop-356920/regions/southamerica-east1/subnetworks/private-sql-1",
            "ip_cidr_range": "10.3.0.0/24",
            "ipv6_access_type": "",
            "ipv6_cidr_range": "",
            "log_config": [],
            "name": "private-sql-1",
            "network": "https://www.googleapis.com/compute/v1/projects/develop-356920/global/networks/iis-net-sql",
            "private_ip_google_access": false,
            "private_ipv6_google_access": "DISABLE_GOOGLE_ACCESS",
            "project": "develop-356920",
            "purpose": "PRIVATE",
            "region": "southamerica-east1",
            "role": "",
            "secondary_ip_range": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/develop-356920/regions/southamerica-east1/subnetworks/private-sql-1",
            "stack_type": "IPV4_ONLY",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_network.sql"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_subnetwork",
      "name": "sql2",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "creation_timestamp": "2022-08-05T13:31:00.502-07:00",
            "description": "",
            "external_ipv6_prefix": "",
            "fingerprint": null,
            "gateway_address": "10.4.0.1",
            "id": "projects/develop-356920/regions/southamerica-east1/subnetworks/private-sql-2",
            "ip_cidr_range": "10.4.0.0/24",
            "ipv6_access_type": "",
            "ipv6_cidr_range": "",
            "log_config": [],
            "name": "private-sql-2",
            "network": "https://www.googleapis.com/compute/v1/projects/develop-356920/global/networks/iis-net-sql",
            "private_ip_google_access": false,
            "private_ipv6_google_access": "DISABLE_GOOGLE_ACCESS",
            "project": "develop-356920",
            "purpose": "PRIVATE",
            "region": "southamerica-east1",
            "role": "",
            "secondary_ip_range": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/develop-356920/regions/southamerica-east1/subnetworks/private-sql-2",
            "stack_type": "IPV4_ONLY",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_network.sql"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "host",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "[ad]\n35.247.221.53\n\n[ad:vars]\nansible_user=user\nansible_password=\"P@ssw0rd\"\nansible_port=5986\nansible_connection=winrm\n; ansible_winrm_operation_timeout_sec=60\n; ansible_winrm_read_timeout_sec=70\n; ansible_winrm_scheme=http\nansible_winrm_transport=basic\nansible_winrm_server_cert_validation=ignore\nansible_winrm_kerberos_delegation=true\n\n[iis]\n35.247.225.182\n\n[iis:vars]\nansible_user=user\nansible_password=\"P@ssw0rd\"\nansible_port=5986\nansible_connection=winrm\n; ansible_winrm_operation_timeout_sec=60\n; ansible_winrm_read_timeout_sec=70\n; ansible_winrm_scheme=http\nansible_winrm_transport=basic\nansible_winrm_server_cert_validation=ignore\nansible_winrm_kerberos_delegation=true\n\n[sql1]\n34.95.241.200\n\n[sql1:vars]\nansible_user=user\nansible_password=\"P@ssw0rd\"\nansible_port=5986\nansible_connection=winrm\n; ansible_winrm_operation_timeout_sec=60\n; ansible_winrm_read_timeout_sec=70\n; ansible_winrm_scheme=http\nansible_winrm_transport=basic\nansible_winrm_server_cert_validation=ignore\nansible_winrm_kerberos_delegation=true\n\n[sql2]\n35.198.55.138\n\n[sql2:vars]\nansible_user=user\nansible_password=\"P@ssw0rd\"\nansible_port=5986\nansible_connection=winrm\n; ansible_winrm_operation_timeout_sec=60\n; ansible_winrm_read_timeout_sec=70\n; ansible_winrm_scheme=http\nansible_winrm_transport=basic\nansible_winrm_server_cert_validation=ignore\nansible_winrm_kerberos_delegation=true",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./hosts.ini",
            "id": "67211ec5aab3c4c47e4081058910d55de9de0327",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.host-ansible",
            "google_compute_instance.instancia-ad",
            "google_compute_instance.instancia-iis",
            "google_compute_instance.instancia-sql-1",
            "google_compute_instance.instancia-sql-2",
            "google_compute_network.sql",
            "google_compute_subnetwork.ad1",
            "google_compute_subnetwork.sql1",
            "google_compute_subnetwork.sql2"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "monitora",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar link = \"35.247.225.182\"\n\nfunc main() {\n\n\tsite := (\"https://\" + link)\n\tresposta, _ := http.Get(site)\n\n\tif resposta.StatusCode == 200 {\n\t\tfmt.Println(\"Acesso está OK! \\n --- \\n\", resposta)\n\t} else {\n\t\tfmt.Println(\"Falha ao acessar: \\n --- \\n\", resposta)\n\t}\n\n}\n",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./monitora.go",
            "id": "7daa923db0c8fe74bfbc5c137cd0a6dadbb4a20d",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.script-monitora",
            "google_compute_instance.instancia-iis",
            "google_compute_network.sql",
            "google_compute_subnetwork.sql1"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "playbook-ad",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "---\n- name: Cria Ambiente Active Directory com Dominio\n  hosts: ad\n  vars:\n    temp_address: 35.247.221.53\n    dc_address: 35.247.221.53\n    dc_netmask_cidr: 24\n    dc_gateway: 35.247.221.53\n    dc_hostname: 'bookshelf-ad'\n    domain_name: \"example-gcp.local\"\n    local_admin: '.\\administrator'\n    temp_password: 'P@ssw0rd'\n    dc_password: 'P@ssw0rd'\n    recovery_password: 'P@ssw0rd'\n    upstream_dns_1: 8.8.8.8\n    upstream_dns_2: 8.8.4.4\n    reverse_dns_zone: \"172.16.108.0/24\"\n    ntp_servers: \"0.us.pool.ntp.org,1.us.pool.ntp.org,2.us.pool.ntp.org,3.us.pool.ntp.org\"\n  gather_facts: no\n  \n  tasks:\n  - name: Aguardando Instancia ficar disponivel\n    wait_for_connection:\n      timeout: 900\n    delegate_to: '{{ dc_address }}'\n\n  - name: Config IP Estatico\n    win_shell: \"(new-netipaddress -InterfaceAlias Ethernet0 -IPAddress {{ dc_address }} -prefixlength {{dc_netmask_cidr}} -defaultgateway {{ dc_gateway }})\"\n    delegate_to: '{{ temp_address }}'  \n    ignore_errors: True \n\n  - name: Config Senha Admin\n    win_user:\n      name: administrator\n      password: \"{{dc_password}}\"\n      state: present\n    delegate_to: '{{ dc_address }}'\n    ignore_errors: True  \n \n  - name: Aguardando o WinRM ficar disponivel na instancia \n    wait_for_connection:\n      timeout: 900\n    delegate_to: '{{ dc_address }}'\n\n  - name: Config DNS\n    win_dns_client:\n      adapter_names: '*'\n      ipv4_addresses:\n      - '{{ upstream_dns_1 }}'\n      - '{{ upstream_dns_2 }}'\n    delegate_to: '{{ dc_address }}'\n\n  - name: Parando time service\n    win_service:\n      name: w32time\n      state: stopped\n    delegate_to: '{{ dc_address }}'\n\n  - name: Config NTP Servers\n    win_shell: 'w32tm /config /syncfromflags:manual /manualpeerlist:\"{{ntp_servers}}\"'\n    delegate_to: '{{ dc_address }}'\n\n  - name: Inicia time service\n    win_service:\n      name: w32time\n      state: started  \n    delegate_to: '{{ dc_address }}'\n\n  - name: Desativando firewall da instancia\n    win_firewall:\n      state: disabled\n      profiles:\n      - Domain\n      - Private\n      - Public\n    tags: disable_firewall\n    delegate_to: '{{ dc_address }}'\n\n  - name: Mudando o hostname da Instancia \n    win_hostname:\n      name: '{{ dc_hostname }}'\n    register: res\n    delegate_to: '{{ dc_address }}'\n\n  - name: Reiniciando Instancia\n    win_reboot:\n    when: res.reboot_required   \n    delegate_to: '{{ dc_address }}'\n\n  - name: Instalando Active Directory\n    win_feature: \u003e\n         name=AD-Domain-Services\n         include_management_tools=yes\n         include_sub_features=yes\n         state=present\n    register: result\n    delegate_to: '{{ dc_address }}'\n\n  - name: Criando Dominio\n    win_domain: \u003e\n       dns_domain_name='{{ domain_name }}'\n       safe_mode_password='{{ recovery_password }}'\n    register: ad\n    delegate_to: \"{{ dc_address }}\"\n\n  - name: Reiniciando Instancia\n    win_reboot:\n     msg: \"Installing AD. Rebooting...\"\n     pre_reboot_delay: 100\n    when: ad.changed\n    delegate_to: \"{{ dc_address }}\"\n\n  - name: Config DNS interno\n    win_dns_client:\n      adapter_names: '*'\n      ipv4_addresses:\n      - '127.0.0.1'\n    delegate_to: '{{ dc_address }}'\n\n  - name: Criando Zona de DNS Reversa\n    win_shell: \"Add-DnsServerPrimaryZone -NetworkID {{reverse_dns_zone}} -ReplicationScope Forest\"\n    delegate_to: \"{{ dc_address }}\"    \n    retries: 30\n    delay: 60\n    register: result           \n    until: result is succeeded\n\n  - name: Cria User\n    win_domain_user:\n      name: \"{{item.nome}}\"\n      password: P@ssw0rd\n      state: present\n      groups:\n       - \"{{item.grupo}}\"\n    loop:\n    - { nome: 'spirogiro', grupo: 'Domain Admins' }\n    - { nome: 'spyrojaira', grupo: 'Domain Admins' }\n    - { nome: 'sql.service', grupo: 'Domain Users' }\n    - { nome: 'teste2', grupo: 'Domain Users' }",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./playbook-ad.yml",
            "id": "b12e6adb4329481b987b6229cc9333016be82555",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.playbook-ad",
            "google_compute_instance.instancia-ad",
            "google_compute_network.sql",
            "google_compute_subnetwork.ad1"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "playbook-iis",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "---\n- name: Configura Ambiente IIS\n  hosts: iis\n  tasks:\n    - name: \"Alterando hostname e reiniciando\"\n      win_hostname:\n        name: bookshelf-iis\n      register: iis\n    - win_reboot:\n      when: iis.reboot_required \n\n    - name: \"Colocando DNS do dominio na instancia\"\n      ansible.windows.win_dns_client:\n        adapter_names: Ethernet\n        dns_servers: 10.1.0.100\n\n    - name: \"Adicionando IIS ao dominio\"\n      win_domain_membership:\n        dns_domain_name: example-gcp.local\n        domain_admin_user: spirogiro@example-gcp.local\n        domain_admin_password: P@ssw0rd\n        state: domain\n      register: domain_state\n    - win_reboot:\n        pre_reboot_delay: 100\n      when: domain_state.reboot_required\n \n \n\n",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./playbook-iis.yml",
            "id": "4dcc4ac1d2c420691dc90f1f12297e1ea7a42d12",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.playbook-iis",
            "google_compute_instance.instancia-ad",
            "google_compute_instance.instancia-iis",
            "google_compute_network.sql",
            "google_compute_subnetwork.ad1",
            "google_compute_subnetwork.sql1"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "playbook-sql",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "---\n- name: Configuração SQL1\n  hosts: sql1\n  tasks:\n    - name: \"Alterando hostname e reiniciando\"\n      win_hostname:\n        name: bookshelf-sql1\n      register: iis\n    - win_reboot:\n      when: iis.reboot_required \n\n- name: Configuração SQL2\n  hosts: sql2\n  tasks:\n    - name: \"Alterando hostname e reiniciando\"\n      win_hostname:\n        name: bookshelf-sql2\n      register: iis\n    - win_reboot:\n      when: iis.reboot_required\n    \n    - name: Cria pasta para backups de banco de dados e compartilha\n      ansible.windows.win_powershell:\n        script: |\n          New-Item -ItemType directory -Path C:\\SQLBackup\n          New-SMBShare -Name SQLBackup -Path C:\\SQLBackup -FullAccess \"Authenticated Users\"\n\n- name: Configuraçao Rede e instalações\n  hosts: sql1:sql2\n  tasks:\n    - name: \"Colocando DNS do dominio na instancia\"\n      ansible.windows.win_dns_client:\n        adapter_names: Ethernet\n        dns_servers: 10.1.0.100\n\n    - name: Adiciona regras de firewall do Windows\n      ansible.windows.win_powershell:\n        script: |\n          netsh firewall set service remoteadmin\n          netsh advfirewall firewall add rule name=\"5022 for Avail Groups\" dir=in action=allow protocol=TCP localport=5022\n          netsh advfirewall firewall add rule name=\"1433 for SQL Server\" dir=in action=allow protocol=TCP localport=1433\n\n    - name: Instala o recurso de cluster de failover\n      win_feature: \n       name: \"Failover-Clustering\"\n       state: present\n       include_sub_features: true\n       include_management_tools: true\n\n    - name: Cria as pastas para os dados e arquivos de registro do SQL Server\n      ansible.windows.win_powershell:\n        script: |\n          New-Item -ItemType directory -Path C:\\SQLData\n          New-Item -ItemType directory -Path C:\\SQLLog    \n\n    - name: \"Adicionando SQL ao dominio\"\n      win_domain_membership:\n        dns_domain_name: example-gcp.local\n        domain_admin_user: spirogiro@example-gcp.local\n        domain_admin_password: P@ssw0rd\n        state: domain\n      register: domain_state\n    - win_reboot:\n        pre_reboot_delay: 100\n      when: domain_state.reboot_required\n\n\n- name: Certifica que a instância do SQL1 esta pronta\n  hosts: sql1\n  tasks:\n    - name: Ingressando SQL1 ao Cluster\n      ansible.windows.win_powershell:\n        script: |\n          $node1 = \"bookshelf-sql1\"\n          $node2 = \"bookshelf-sql2\"\n          \n          $nameWSFC = \"bookshelf-dbclus\"\n          \n          $ipWSFC1 = \"10.3.0.4\"\n          $ipWSFC2 = \"10.4.0.4\"\n          \n          $ipWSListener1 = \"10.3.0.5\"\n          $ipWSListener2 = \"10.4.0.5\"\n          \n          $SQLServer1IsReady=$False\n          For ($i=0; $i -le 30; $i++) {\n              $SqlCatalog = \"master\"\n              $SqlConnection = New-Object System.Data.SqlClient.SqlConnection\n              $SqlConnection.ConnectionString = \"Server = $node1;\" + `\n                   \"Database = $SqlCatalog; Integrated Security = True\"\n              try {\n                  $SqlConnection.Open()\n                  Write-Host \"Connection to the server $node1 was successful\"\n                  $SQLServer1IsReady=$True\n                  $SqlConnection.Close()\n                  break\n              }\n              catch {\n                  Write-Host \"SQL server $node1 is not ready, waiting for 60s\"\n                  Start-Sleep -s 60 #Wait for 60 seconds\n              }\n          }\n          if($SQLServer1IsReady -eq $False) {\n              Write-Error \"$node1 is not responding. Was it deployed correctly?\"\n          }\n    \n- name: Certifica que a instância do SQL2 esta pronta\n  hosts: sql2\n  tasks:\n    - name: Ingressando SQL2 ao Cluster\n      ansible.windows.win_powershell:\n        script: |\n          $node1 = \"bookshelf-sql1\"\n          $node2 = \"bookshelf-sql2\"\n\n          $SQLServer2IsReady=$False\n          For ($i=0; $i -le 30; $i++) {\n              $SqlCatalog = \"master\"\n              $SqlConnection = New-Object System.Data.SqlClient.SqlConnection\n              $SqlConnection.ConnectionString = \"Server = $node2;\" + `\n                    \"Database = $SqlCatalog; Integrated Security = True\"\n              try {\n                  $SqlConnection.Open()\n                  Write-Host \"Connection to the server $node2 was successful\"\n                  $SQLServer2IsReady=$True\n                  $SqlConnection.Close()\n                  break\n              }\n              catch {\n                  Write-Host \"SQL server $node2 is not ready, waiting for 60s\"\n                  Start-Sleep -s 60 #Wait for 60 seconds\n              }\n          }\n          if($SQLServer2IsReady -eq $False) {\n              Write-Error \"$node2 is not responding. Was it deployed correctly?\"\n          }\n    \n- name: Criando o Cluster\n  hosts: sql1\n  tasks:\n    - name: Criando o Cluster\n      ansible.windows.win_powershell:\n        script: |\n          $node1 = \"bookshelf-sql1\"\n          $node2 = \"bookshelf-sql2\"\n          \n          $nameWSFC = \"bookshelf-dbclus\"\n          \n          $ipWSFC1 = \"10.3.0.4\"\n          $ipWSFC2 = \"10.4.0.4\"\n\n          New-Cluster -Name $nameWSFC -Node $node1, $node2 -NoStorage `\n              -StaticAddress $ipWSFC1, $ipWSFC2\n\n    - name: Ativa o recurso de grupos de disponibilidade\n      ansible.windows.win_powershell:\n        script: |\n          Enable-SqlAlwaysOn -ServerInstance $node1 -Force\n          Enable-SqlAlwaysOn -ServerInstance $node2 -Force\n\n- name: Configurando o Banco de Dados\n  hosts: sql1\n  tasks:\n    - name: Criando o Banco de Dados\n      ansible.windows.win_powershell:\n        script: |\n          $node1 = \"bookshelf-sql1\"\n\n          $CreateDatabaseSQLScript =  @\"\n          CREATE DATABASE bookshelf ON PRIMARY\n              (NAME = 'bookshelf_Data', FILENAME='C:\\SQLData\\bookshelf_data.mdf', SIZE =\n          256MB, MAXSIZE = UNLIMITED, FILEGROWTH = 256MB )\n              LOG ON (NAME = 'bookshelf_log', FILENAME='C:\\SQLLog\\bookshelf_log.ldf',\n          SIZE = 256MB, MAXSIZE = UNLIMITED, FILEGROWTH = 256MB )\n          GO\n          USE [bookshelf]\n          Exec dbo.sp_changedbowner @loginame = 'sa', @map = false;\n          ALTER DATABASE [bookshelf] SET RECOVERY FULL;\n          GO\n          BACKUP DATABASE bookshelf to disk =\n          '\\\\bookshelf-sql2\\SQLBackup\\bookshelf.bak' WITH INIT\n          GO\n          \"@\n          Invoke-Sqlcmd -Query $CreateDatabaseSQLScript -ServerInstance $node1\n\n    - name: Criando Tabela Books\n      ansible.windows.win_powershell:\n        script: |\n          $node1 = \"bookshelf-sql1\"\n          \n          $CreateTableSQLScript =  @\"\n          USE [bookshelf]\n          GO\n          SET ANSI_NULLS ON\n          GO\n          SET QUOTED_IDENTIFIER ON\n          GO\n          CREATE TABLE [dbo].[Books] (\n                      [Id] [bigint] IDENTITY(1,1) NOT NULL,\n                      [Title] [nvarchar](max) NOT NULL,\n                      [Author] [nvarchar](max) NULL,\n                      [PublishedDate] [datetime] NULL,\n                      [ImageUrl] [nvarchar](max) NULL,\n                      [Description] [nvarchar](max) NULL,\n                      [CreatedById] [nvarchar](max) NULL,\n          CONSTRAINT [PK_dbo.Books] PRIMARY KEY CLUSTERED\n              ([Id] ASC) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF,\n          IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n          ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\n          GO\n          \"@\n          Invoke-Sqlcmd -Query $CreateTableSQLScript -ServerInstance $node1\n\n    - name: Criando Tabela Books\n      ansible.windows.win_powershell:\n        script: |\n          $Domain = \"example-gcp.local\"\n          $ADControllerFQDN = \"bookshelf-ad.$Domain\"\n          $ServiceAccountName = \"sql.service\"\n          $ServiceAccountPrincipalName = \"$ServiceAccountName@$Domain\"\n          $node1 = \"bookshelf-sql1\"\n\n          $AddSQLServiceAccountScript =  @\"\n          USE [master]\n          GO\n              CREATE LOGIN [EXAMPLE-GCP\\sql.service] FROM WINDOWS WITH\n          DEFAULT_DATABASE=[bookshelf], DEFAULT_LANGUAGE=[us_english]\n          GO\n          USE [bookshelf]\n          GO\n          CREATE USER [EXAMPLE-GCP\\sql.service] FOR LOGIN [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_accessadmin] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_backupoperator] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_datareader] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_datawriter] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_ddladmin] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_owner] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          USE [bookshelf]\n          GO\n          ALTER ROLE [db_securityadmin] ADD MEMBER [EXAMPLE-GCP\\sql.service]\n          GO\n          \"@\n          Invoke-Sqlcmd -Query $AddSQLServiceAccountScript -ServerInstance $node1\n\n    - name: Realizando Backup entre as replicas\n      ansible.windows.win_powershell:\n        script: |\n          $Database=\"bookshelf\"\n          $BackupFolder=\"SQLBackup\"\n          $node1 = \"bookshelf-sql1\"\n          $node2 = \"bookshelf-sql2\"\n          $SharedLocation=\"\\\\$node2\\$BackupFolder\"\n          $ListenerName=\"sql-listener\"\n          $AGName=\"MainAG\"\n          $PrimaryServer = \"$node1.$Domain\\MSSQLSERVER\"\n          $SecondaryServer = \"$node2.$Domain\\MSSQLSERVER\"\n\n          Backup-SqlDatabase `\n              -Database $Database -Initialize `\n              -BackupFile \"$SharedLocation\\$Database.bak\" `\n              -ServerInstance $node1\n\n          Restore-SqlDatabase `\n              -Database $Database `\n              -BackupFile \"$SharedLocation\\$Database.bak\" `\n              -ServerInstance $node2 `\n              -NORECOVERY\n\n          Backup-SqlDatabase `\n              -Database $Database -Initialize `\n              -BackupFile \"$SharedLocation\\$Database.log\" `\n              -ServerInstance $node1 `\n              -BackupAction Log\n\n          Restore-SqlDatabase `\n              -Database $Database `\n              -BackupFile \"$SharedLocation\\$Database.log\" `\n              -ServerInstance $node2 `\n              -RestoreAction Log `\n              -NORECOVERY\n\n    - name: Permissões para DCOM/RL/RA\n      ansible.windows.win_powershell:\n        script: |\n          $Principal = \"example-gcp.local\\sql.service\"\n          $Computers = \"bookshelf-sql2\"\n\n          function get-sid\n          {\n          PARAM ($DSIdentity)\n          $ID = new-object System.Security.Principal.NTAccount($DSIdentity)\n          return $ID.Translate( [System.Security.Principal.SecurityIdentifier] ).toString()\n          }\n\n          $sid = get-sid $Principal\n\n          #DefaultLaunchPermission - Local Launch, Remote Launch, Local Activation, Remote Activation\n          $DCOMSDDLDefaultLaunchPermission = \"A;;CCDCLCSWRP;;;$sid\"\n\n          #DefaultAccessPermision - Local Access, Remote Access\n          $DCOMSDDLDefaultAccessPermision = \"A;;CCDCLC;;;$sid\"\n\n          #PartialMatch\n          $DCOMSDDLPartialMatch = \"A;;\\w+;;;$sid\"\n\n          foreach ($strcomputer in $computers)\n          {\n          write-host \"`nWorking on $strcomputer with principal $Principal ($sid):\"\n          # Get the respective binary values of the DCOM registry entries\n          $Reg = [WMIClass]\"\\\\$strcomputer\\root\\default:StdRegProv\"\n          $DCOMDefaultLaunchPermission = $Reg.GetBinaryValue(2147483650,\"software\\microsoft\\ole\",\"DefaultLaunchPermission\").uValue\n          $DCOMDefaultAccessPermission = $Reg.GetBinaryValue(2147483650,\"software\\microsoft\\ole\",\"DefaultAccessPermission\").uValue\n\n          # Convert the current permissions to SDDL\n          write-host \"`tConverting current permissions to SDDL format...\"\n          $converter = new-object system.management.ManagementClass Win32_SecurityDescriptorHelper\n          $CurrentDCOMSDDLDefaultLaunchPermission = $converter.BinarySDToSDDL($DCOMDefaultLaunchPermission)\n          $CurrentDCOMSDDLDefaultAccessPermission = $converter.BinarySDToSDDL($DCOMDefaultAccessPermission)\n\n          # Build the new permissions\n          if (($CurrentDCOMSDDLDefaultLaunchPermission.SDDL -match $DCOMSDDLPartialMatch) -and ($CurrentDCOMSDDLDefaultLaunchPermission.SDDL -notmatch $DCOMSDDLDefaultLaunchPermission))\n          {\n            $NewDCOMSDDLDefaultLaunchPermission = $CurrentDCOMSDDLDefaultLaunchPermission.SDDL -replace $DCOMSDDLPartialMatch, $DCOMSDDLDefaultLaunchPermission\n          }\n          else\n          {\n            $NewDCOMSDDLDefaultLaunchPermission = $CurrentDCOMSDDLDefaultLaunchPermission.SDDL + \"(\" + $DCOMSDDLDefaultLaunchPermission + \")\"\n          }\n\n          if (($CurrentDCOMSDDLDefaultAccessPermission.SDDL -match $DCOMSDDLPartialMatch) -and ($CurrentDCOMSDDLDefaultAccessPermission.SDDL -notmatch $DCOMSDDLDefaultAccessPermision))\n          {\n            $NewDCOMSDDLDefaultAccessPermission = $CurrentDCOMSDDLDefaultAccessPermission.SDDL -replace $DCOMSDDLPartialMatch, $DCOMSDDLDefaultAccessPermision\n          }\n          else\n          {\n            $NewDCOMSDDLDefaultAccessPermission = $CurrentDCOMSDDLDefaultAccessPermission.SDDL + \"(\" + $DCOMSDDLDefaultAccessPermision + \")\"\n          }\n\n          # Convert SDDL back to Binary\n          write-host \"`tConverting SDDL back into binary form...\"\n          $DCOMbinarySDDefaultLaunchPermission = $converter.SDDLToBinarySD($NewDCOMSDDLDefaultLaunchPermission)\n          $DCOMconvertedPermissionDefaultLaunchPermission = ,$DCOMbinarySDDefaultLaunchPermission.BinarySD\n\n          $DCOMbinarySDDefaultAccessPermission = $converter.SDDLToBinarySD($NewDCOMSDDLDefaultAccessPermission)\n          $DCOMconvertedPermissionsDefaultAccessPermission = ,$DCOMbinarySDDefaultAccessPermission.BinarySD\n\n          # Apply the changes\n          write-host \"`tApplying changes...\"\n          if ($CurrentDCOMSDDLDefaultLaunchPermission.SDDL -match $DCOMSDDLDefaultLaunchPermission)\n          {\n            write-host \"`t`tCurrent DefaultLaunchPermission matches desired value.\"\n          }\n          else\n          {\n            $result = $Reg.SetBinaryValue(2147483650,\"software\\microsoft\\ole\",\"DefaultLaunchPermission\", $DCOMbinarySDDefaultLaunchPermission.binarySD)\n            if($result.ReturnValue='0'){write-host \"  Applied DefaultLaunchPermission complete.\"}\n          }\n\n          if ($CurrentDCOMSDDLDefaultAccessPermission.SDDL -match $DCOMSDDLDefaultAccessPermision)\n          {\n            write-host \"`t`tCurrent DefaultAccessPermission matches desired value.\"\n          }\n          else\n          {\n            $result = $Reg.SetBinaryValue(2147483650,\"software\\microsoft\\ole\",\"DefaultAccessPermission\", $DCOMbinarySDDefaultAccessPermission.binarySD)\n            if($result.ReturnValue='0'){write-host \"  Applied DefaultAccessPermission complete.\"}\n\n          }\n          }\n          #----------------------------------------------------------------------------------------------------------\n          trap\n          {\n          $exMessage = $_.Exception.Message\n          if($exMessage.StartsWith(\"L:\"))\n          {write-host \"`n\" $exMessage.substring(2) \"`n\" -foregroundcolor white -backgroundcolor darkblue}\n          else {write-host \"`nError: \" $exMessage \"`n\" -foregroundcolor white -backgroundcolor darkred}\n          Exit\n          }\n          #----------------------------------------------------------------------------------------------------------\n\n#    - name: Inicializando os endpoints\n#      ansible.windows.win_powershell:\n#        script: |\n#          $Database=\"bookshelf\"\n#          $BackupFolder=\"SQLBackup\"\n#          $node1 = \"bookshelf-sql1\"\n#          $node2 = \"bookshelf-sql2\"\n#          $Domain = \"example-gcp.local\"\n#          $SharedLocation=\"\\\\$node2\\$BackupFolder\"\n#          $ListenerName=\"sql-listener\"\n#          $AGName=\"MainAG\"\n#          $PrimaryServer = \"$node1.$Domain\\MSSQLSERVER\"\n#          $SecondaryServer = \"$node2.$Domain\\MSSQLSERVER\"\n#          \n#          $endpoint1=New-SqlHADREndpoint -Port 5022 -Owner sa `\n#              -Encryption Supported -EncryptionAlgorithm Aes `\n#              -Name AlwaysonEndpoint1 `\n#              -Path \"SQLSERVER:\\SQL\\$node1.$Domain\\Default\"\n#          Set-SqlHADREndpoint -InputObject $endpoint1 -State Started\n#          $endpoint2=New-SqlHADREndpoint -Port 5022 -Owner sa `\n#              -Encryption Supported -EncryptionAlgorithm Aes `\n#              -Name AlwaysonEndpoint2 `\n#              -Path \"SQLSERVER:\\SQL\\$node2.$Domain\\Default\"\n#          Set-SqlHADREndpoint -InputObject $endpoint2 -State Started",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./playbook-sql.yml",
            "id": "78b6694379969b28111671ba2290a84c8df1bb2d",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.playbook-sql",
            "google_compute_instance.instancia-ad",
            "google_compute_instance.instancia-sql-2",
            "google_compute_network.sql",
            "google_compute_subnetwork.ad1",
            "google_compute_subnetwork.sql1",
            "google_compute_subnetwork.sql2"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "null_resource",
      "name": "playbook-exec",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "476868585918881374",
            "triggers": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.host-ansible",
            "data.template_file.playbook-ad",
            "data.template_file.playbook-iis",
            "data.template_file.playbook-sql",
            "google_compute_instance.instancia-ad",
            "google_compute_instance.instancia-iis",
            "google_compute_instance.instancia-sql-1",
            "google_compute_instance.instancia-sql-2",
            "google_compute_network.sql",
            "google_compute_subnetwork.ad1",
            "google_compute_subnetwork.sql1",
            "google_compute_subnetwork.sql2",
            "local_file.host",
            "local_file.playbook-ad",
            "local_file.playbook-iis",
            "local_file.playbook-sql",
            "time_sleep.espera_130_segundos"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "time_sleep",
      "name": "espera_130_segundos",
      "provider": "provider[\"registry.terraform.io/hashicorp/time\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "create_duration": "130s",
            "destroy_duration": null,
            "id": "2022-08-05T20:32:25Z",
            "triggers": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    }
  ]
}
